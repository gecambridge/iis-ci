
@{
    ViewBag.Title = "IISCI - " + Request.QueryString["id"];
}

<section style="overflow:auto">

    <script type="text/javascript">
        ({
            id: '@(Request.QueryString["id"])',
            sourceTypes: [
                { label: 'Git', value: 'git' },
                { label: 'TFS 2015', value: 'tfs2015' },
                { label: 'Zip-Url', value: 'zipurl' }
            ],
            addConnectionString: function (scope, sender) {
                var items = Atom.get(sender, "items");
                Atom.add(items, { Name: '', ConnectionString: '', ProviderName: 'System.Data.SqlClient' });
            },
            addAppSetting: function (scope, sender) {
                var items = Atom.get(sender, "items");
                Atom.add(items, { Key: '', Value: '' });
            },
            addStartUrl: function (scope, sender) {
                var items = Atom.get(sender, "items");
                Atom.add(items, { Url: '/public/prefetch' });
            },

            resetBuildTrigger: function (scope, sender) {
                var data = Atom.get(sender, "data");
                AtomPromise.json('/iis/GenerateBuildKey').then(function (ap) {
                    Atom.set(data, "TriggerKey", ap.value());
                }).invoke();
            },
            buildTrigger: function (id, key) {
                if (!key)
                    return "";
                return location.protocol + "//" + location.host + "/iis/buildtrigger/" + id + "/" + key;
            }

        })
    </script>


    <div class="data-form"
         id="siteForm"
         atom-data="[AtomPromise.json('/iis/getbuildconfig', { id: $appScope.id })]"
         atom-post-url="[Atom.url('/iis/updatebuildconfig',{ id: $appScope.id })]"
         atom-success-message="Config saved successfully"
         atom-next="{ $x.confirm('Do you want to build the site?', [
             $x.localWindow({
                                path: 'buildWindow',
                                title: 'Building ' + $appScope.id,
                                windowHeight: 600,
                                windowWidth: 800,
                                scope: {
                                    url: '/iis/build?id=' + $appScope.id
                                }
                            })
         ] ) }"
         atom-type="AtomForm"
         style="overflow:auto">
        <div atom-type="AtomFormLayout">

            <select atom-label="Source"
                    atom-type="AtomComboBox"
                    atom-items="{$appScope.sourceTypes}"
                    atom-value="$[data.SourceType]"></select>

            <input atom-label="Url"
                   atom-value="$[data.SourceUrl]" />

            <input atom-field-visible="[/^git/i.test($data.SourceType)]"
                   atom-label="Branch"
                   atom-value="$[data.SourceBranch]" />

            <input atom-field-visible="[/^tfs/i.test($data.SourceType)]"
                   atom-label="TFS Domain"
                   atom-value="$[data.Domain]" />


            <input atom-label="Username"
                   atom-value="$[data.Username]" />

            <input atom-label="Password"
                   type="password"
                   atom-value="$[data.Password]" />

            <div atom-field-visible="[/^tfs/i.test($data.SourceType)]">
                For open access token, leave username blank and just enter token in password
            </div>


            <input atom-field-visible="[/^tfs/i.test($data.SourceType)]"
                   atom-label="TFS Collection"
                   atom-value="$[data.Collection]" />

            <input atom-field-visible="[/^tfs/i.test($data.SourceType)]"
                   atom-label="TFS Root Folder"
                   placeholder="$/ ... (path must start with $)"
                   atom-value="$[data.RootFolder]" />

            <div atom-field-visible="[/^tfs/i.test($data.SourceType)]">
                <div>Root folder should be the nested folder inside path starting with $, is typically $/TFProjectName/Branch/SourceFolder etc.</div>
                <div>Please use "/" as path separator required for TFS.</div>
            </div>


            <input atom-label="Solution"
                   atom-value="$[data.SolutionPath]" />
            <div>
                <div>Path to Solution (.sln) file starting from root. Should not start with "\", it is a relative path.</div>
                <div>Relative path starts from folder where .git folder exists.</div>
            </div>

            <input atom-label="Web Project"
                   atom-value="$[data.WebProjectPath]" />
            <div>
                <div>Path to Web Proejct (.csproj) file starting from root. Should not start with "\", it is a relative path.</div>
                <div>Relative path starts from folder where .git folder exists.</div>
            </div>

            <ul atom-label="Build Solution?"
                atom-type="AtomYesNoControl"
                atom-value="$[data.UseMSBuild]"></ul>


            <input atom-label="MSBuild Config"
                   placeholder="Debug"
                   atom-value="$[data.MSBuildConfig]" />

            <input atom-label="MSBuild Custom Parameters"
                   placeholder="Optional"
                   atom-value="$[data.MSBuildParameters]" />

            <ul atom-label="Deploy New Folder"
                atom-type="AtomYesNoControl"
                atom-value="$[data.DeployInNewFolder]"></ul>

            <div>
                Warning !!! Deploy New folder is very slow as it will create new folder, copy contents and set new folder as IIS website root. This option must only be used when IIS's dynamic compilation is failing deployment frequently.
            </div>

            <table class="app-settings"
                   atom-label="App Settings"
                   atom-type="AtomItemsControl"
                   atom-items="[$data.AppSettings]">
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                        <th class="command"><button atom-event-click="{$appScope.addAppSetting}">+</button></th>
                    </tr>
                </thead>
                <tbody atom-presenter="itemsPresenter">
                    <tr atom-template="itemTemplate">
                        <td class="key"><input atom-value="$[data.Key]" /></td>
                        <td class="value"><input atom-value="$[data.Value]" /></td>
                        <td class="command"><button atom-event-click="{ { confirm:[ 'Are you sure you want to remove?', $owner.templateParent.removeItemCommand ] } }">-</button></td>
                    </tr>
                </tbody>
            </table>

            <table atom-label="Connection Strings"
                   class="connection-strings"
                   atom-type="AtomItemsControl"
                   atom-items="[$data.ConnectionStrings]">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Connection String</th>
                        <th>Provider</th>
                        <th class="command"><button atom-event-click="{$appScope.addConnectionString}">+</button></th>
                    </tr>
                </thead>
                <tbody atom-presenter="itemsPresenter">
                    <tr atom-template="itemTemplate">
                        <td class="name">
                            <input placeholder="Name"
                                   atom-value="$[data.Name]" />
                        </td>
                        <td class="connection-string">
                            <input placeholder="Connection String"
                                   atom-value="$[data.ConnectionString]" />
                        </td>
                        <td class="provider">
                            <input placeholder="Provider (e.g. System.Data.SqlClient)"
                                   atom-value="$[data.ProviderName]" />
                        </td>
                        <td class="command"><button atom-event-click="{ { confirm:[ 'Are you sure you want to remove?', $owner.templateParent.removeItemCommand ] } }">-</button></td>
                    </tr>
                </tbody>
            </table>

            <textarea class="custom-xdt"
                      atom-label="Custom XDT"
                      atom-value="$[data.CustomXDT]"></textarea>

            <input atom-label="Build Trigger"
                   atom-value="[$appScope.buildTrigger($appScope.id,$data.TriggerKey)]" />

            <button atom-event-click="{ $appScope.resetBuildTrigger }">Reset Build Trigger</button>

            <input atom-label="Notify Emails"
                   placeholder="Comma separated emails"
                   atom-value="$[data.Notify]" />

            <table atom-label="Start Urls"
                   atom-type="AtomItemsControl"
                   atom-items="[$data.StartUrls]">
                <thead>
                    <tr>
                        <th colspan="2">
                            These urls are automatically loaded after build was successful.
                        </th>
                    </tr>
                    <tr>
                        <th>Url</th>
                        <th class="command"><button atom-event-click="{$appScope.addStartUrl}">+</button></th>
                    </tr>
                </thead>
                <tbody atom-presenter="itemsPresenter">
                    <tr atom-template="itemTemplate">
                        <td class="connection-string">
                            <input placeholder="Url"
                                   atom-value="$[data.Url]" />
                        </td>
                        <td class="command"><button atom-event-click="{ { confirm:[ 'Are you sure you want to remove?', $owner.templateParent.removeItemCommand ] } }">-</button></td>
                    </tr>
                </tbody>
            </table>


        </div>
    </div>


</section>

<footer class="atom-wizard-command-bar">

    <button atom-event-click="{
                            $x.localWindow({
                                path: 'buildWindow',
                                title: 'Building ' + $appScope.id,
                                windowHeight: 600,
                                windowWidth: 800,
                                scope: {
                                    url: '/iis/build?id=' + $appScope.id + '&reset=true'
                                }
                            })
                        }">
        Reset &amp; Build
    </button>

        <button atom-event-click="{ $x.localWindow({
                                path: 'buildWindow',
                                title: 'Building ' + $appScope.id,
                                windowHeight: 600,
                                windowWidth: 800,
                                scope: {
                                    url: '/iis/build?id=' + $appScope.id
                                }
                            }) }">
            Build
        </button>

        <button atom-event-click="{ $x.localWindow({
                                path: 'buildWindow',
                                title: 'Building ' + $appScope.id,
                                windowHeight: 600,
                                windowWidth: 800,
                                scope: {
                                    url: '/iis/build?id=' + $appScope.id + '&redeploy=true'
                                }
                            }) }">
            Redeploy
        </button>


    <button atom-event-click="{$appScope.siteForm.submitCommand}">
        Save
    </button>


</footer>

<div atom-template-name="buildWindow" atom-type="AtomDockPanel">
    
    <iframe 
            atom-dock="Fill"
            style="border:none;"
            atom-src="{$scope.url}"></iframe>



</div>

